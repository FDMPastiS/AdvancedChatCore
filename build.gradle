plugins {
    id 'fabric-loom' version '1.9.+' // loom 1.9.x
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(Integer.parseInt(project.findProperty('javaVersion') ?: '21'))
    }
}

minecraft {
    // cible Minecraft 1.21.4 et Fabric loader 0.16.9
    version = project.findProperty('minecraftVersion') ?: '1.21.4'
    loader = project.findProperty('fabricLoaderVersion') ?: '0.16.9'
    // mappings : tu peux utiliser "official" (mojang) ou "yarn" si tu préfères les noms yarn
    // pour la plupart des ports récents, "official" fonctionne ; si ton mod dépend beaucoup de noms yarn, utilise yarn-1.21.4+build.x
    mappings = "official" // ou "yarn-1.21.4+build.1" si besoin
}

apply from: 'https://raw.githubusercontent.com/DarkKronicle/GradleScripts/main/gradle/publish.gradle'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

Properties additionalProperties = new Properties()
if (file("extra.properties").exists()) {
	additionalProperties.load(file("extra.properties").newReader())
}

repositories {
    // repos usuels
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    // Fabric API compatible 1.21.4
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.findProperty('fabricApiVersion')}"
    // conserve les autres dépendances d'origine (MaLiLib, etc.)
    // exemple: modImplementation "com.some:library:version"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE.txt"
}

tasks.register('downloadExtra') {
    options.release.set(Integer.parseInt(project.findProperty('javaVersion') ?: '21'))
}

assemble {
	dependsOn 'downloadExtra'
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
